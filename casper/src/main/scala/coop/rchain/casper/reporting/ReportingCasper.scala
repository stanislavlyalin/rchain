package coop.rchain.casper.reporting

import cats.Parallel
import cats.effect.{Concurrent, Sync}
import cats.syntax.all._
import com.google.protobuf.ByteString
import coop.rchain.models.syntax._
import coop.rchain.blockstorage.dag.BlockDagStorage
import coop.rchain.casper.PrettyPrinter
import coop.rchain.casper.genesis.Genesis
import coop.rchain.casper.protocol.{
  BlockMessage,
  ProcessedDeploy,
  ProcessedSystemDeploy,
  SystemDeployData
}
import coop.rchain.casper.reporting.ReportingCasper.RhoReportingRspace
import coop.rchain.casper.rholang.BlockRandomSeed
import coop.rchain.casper.syntax._
import coop.rchain.crypto.hash.Blake2b512Random
import coop.rchain.metrics.Metrics.Source
import coop.rchain.metrics.{Metrics, Span}
import coop.rchain.models.{BindPattern, ListParWithRandom, Par, TaggedContinuation}
import coop.rchain.rholang.RholangMetricsSource
import coop.rchain.rholang.interpreter.RhoRuntime.{bootstrapRegistry, createRhoEnv}
import coop.rchain.rholang.interpreter.SystemProcesses.{BlockData, Definition}
import coop.rchain.rholang.interpreter.accounting.{_cost, CostAccounting}
import coop.rchain.rholang.interpreter.{Reduce, ReplayRhoRuntimeImpl}
import coop.rchain.rspace.RSpace.RSpaceStore
import coop.rchain.rspace.ReportingRspace.ReportingEvent
import coop.rchain.rspace.{ReportingRspace, Match => RSpaceMatch}
import coop.rchain.shared.Log

import scala.concurrent.ExecutionContext
import cats.effect.Ref

/**
  * @param processedDeploy Deploy details
  * @param events Reporting events which were generated by this deploy
  */
final case class DeployReportResult(
    processedDeploy: ProcessedDeploy,
    events: Seq[Seq[ReportingEvent]]
)

/**
  * @param processedSystemDeploy system deploy type
  * @param events Reporting events which were generated by this system deploy
  */
final case class SystemDeployReportResult(
    processedSystemDeploy: SystemDeployData,
    events: Seq[Seq[ReportingEvent]]
)

/**
  * This class is holding the reporting replay events results.
  * @param deployReportResult List of user deploy result
  * @param systemDeployReportResult List of system deploy result
  * @param postStateHash postStateHash which generated by the replay. It is possible that this stateHash is different
  *                      from the stateHash in the blockMessage when there is a bug.
  */
final case class ReplayResult(
    deployReportResult: List[DeployReportResult],
    systemDeployReportResult: List[SystemDeployReportResult],
    postStateHash: ByteString
)

trait ReportingCasper[F[_]] {
  def trace(
      block: BlockMessage
  ): F[ReplayResult]
}

object ReportingCasper {
  def noop[F[_]: Sync]: ReportingCasper[F] = new ReportingCasper[F] {

    override def trace(
        block: BlockMessage
    ): F[ReplayResult] =
      Sync[F].delay(ReplayResult(List.empty, List.empty, ByteString.copyFromUtf8("empty")))
  }

  type RhoReportingRspace[F[_]] =
    ReportingRspace[F, Par, BindPattern, ListParWithRandom, TaggedContinuation]

  def rhoReporter[F[_]: Concurrent: ContextShift: Parallel: BlockDagStorage: Log: Metrics: Span](
      rspaceStore: RSpaceStore[F],
      shardId: String
  ): ReportingCasper[F] =
    new ReportingCasper[F] {
      override def trace(block: BlockMessage): F[ReplayResult] =
        for {
          reportingRspace <- ReportingRuntime.createReportingRSpace(rspaceStore)
          reportingRuntime <- ReportingRuntime.createReportingRuntime(
                               reportingRspace,
                               shardId
                             )
          preStateHash = block.preStateHash

          // Block with empty justifications is genesis which is build with turned off cost accounting
          withCostAccounting = block.justifications.nonEmpty

          // Set Rholang runtime data
          blockdata = BlockData.fromBlock(block)
          _         <- reportingRuntime.setBlockData(blockdata)

          // Reset runtime (in-memory) state
          _ <- reportingRuntime.reset(preStateHash.toBlake2b256Hash)

          // Replay block deploys with reporting
          rand = BlockRandomSeed.randomGenerator(block)
          res <- replayDeploys(
                  reportingRuntime,
                  block.state.deploys,
                  block.state.systemDeploys,
                  rand,
                  withCostAccounting
                )
        } yield res

      private def replayDeploys(
          runtime: ReportingRuntime[F],
          terms: Seq[ProcessedDeploy],
          systemDeploys: Seq[ProcessedSystemDeploy],
          rand: Blake2b512Random,
          withCostAccounting: Boolean
      ): F[ReplayResult] =
        for {
          res <- terms.zipWithIndex.toList.traverse {
                  case (term, i) =>
                    Log[F].info(s"Replay user deploy ${PrettyPrinter.buildString(term.deploy.sig)}") *>
                      runtime
                        .replayDeployE(withCostAccounting)(term, rand.splitByte(i.toByte))
                        .semiflatMap(_ => runtime.getReport)
                        .getOrElse(Seq.empty)
                        .map(DeployReportResult(term, _))
                }
          termsLength = terms.size
          sysRes <- systemDeploys.zipWithIndex.toList.traverse {
                     case (term, i) =>
                       Log[F].info(s"Replay system deploy ${term.systemDeploy}") *>
                         runtime
                           .replayBlockSystemDeploy(
                             term,
                             rand.splitByte((i + termsLength).toByte)
                           )
                           .semiflatMap(_ => runtime.getReport)
                           .getOrElse(Seq.empty)
                           .map(SystemDeployReportResult(term.systemDeploy, _))
                   }

          checkPoint <- runtime.createCheckpoint

        } yield ReplayResult(res, sysRes, checkPoint.root.toByteString)
    }
}

class ReportingRuntime[F[_]: Sync: Span](
    override val reducer: Reduce[F],
    override val space: RhoReportingRspace[F],
    override val cost: _cost[F],
    override val blockDataRef: Ref[F, BlockData],
    override val mergeChs: Ref[F, Set[Par]]
) extends ReplayRhoRuntimeImpl[F](reducer, space, cost, blockDataRef, mergeChs) {
  def getReport: F[Seq[Seq[ReportingEvent]]] = space.getReport
}

object ReportingRuntime {
  implicit val RuntimeMetricsSource: Source =
    Metrics.Source(RholangMetricsSource, "reportingRuntime")

  def createReportingRSpace[F[_]: Concurrent: ContextShift: Parallel: Log: Metrics: Span](
      store: RSpaceStore[F]
  ): F[RhoReportingRspace[F]] = {
    import coop.rchain.rholang.interpreter.storage._
    implicit val m: RSpaceMatch[F, BindPattern, ListParWithRandom] = matchListPar[F]

    ReportingRspace.create[F, Par, BindPattern, ListParWithRandom, TaggedContinuation](store)
  }

  def createReportingRuntime[F[_]: Concurrent: Log: Metrics: Span: Parallel](
      reporting: RhoReportingRspace[F],
      shardId: String,
      extraSystemProcesses: Seq[Definition[F]] = Seq.empty
  ): F[ReportingRuntime[F]] =
    for {
      cost     <- CostAccounting.emptyCost[F]
      mergeChs <- Ref.of(Set[Par]())
      rhoEnv <- {
        implicit val c = cost
        createRhoEnv(
          reporting,
          mergeChs,
          BlockRandomSeed.nonNegativeMergeableTagName(shardId),
          extraSystemProcesses
        )
      }
      (reducer, blockRef) = rhoEnv
      runtime             = new ReportingRuntime[F](reducer, reporting, cost, blockRef, mergeChs)
      _                   <- bootstrapRegistry(runtime)
    } yield runtime
}
